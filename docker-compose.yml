version: '3.8'

services:
  nginx:
    build: ./build/nginx
    restart: always
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./web:/var/www/watcher:ro
    depends_on:
      - watcher
    networks:
      - internal

  watcher:
    build:
      dockerfile: ./build/watcher/Dockerfile
      context: ./
    environment:
      - APP_ENV
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
    depends_on:
      rabbitmq:
        condition: service_healthy

    networks:
      - internal

  postgres:
    image: postgres:15
    container_name: postgres
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: "pg_isready -d ${POSTGRES_DB}"
    networks:
      - internal

  migrate:
    image: migrate/migrate:4
    volumes:
      - ./migrations/postgres:/migrations
    command: [ "-path", "/migrations", "-database",  "postgres://user:password@postgres/gophermart?sslmode=disable", "up" ]
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - internal

  rabbitmq:
    image: rabbitmq:3-management-alpine
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 5s
      timeout: 15s
      retries: 5
    networks:
      - internal
    ports:
      - '15672:15672'

volumes:
  postgres-data:
    driver: local
  rabbitmq-data:
    driver: local

networks:
  internal:
    driver: bridge
